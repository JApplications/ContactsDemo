@{
    ViewData["Title"] = "Contacts demo";
}

<div id="app">

    <loading :active.sync="isLoading"
             :can-cancel="true"
             :on-cancel="onCancel"
             :is-full-page="fullPage"
             color="#007bff"
             loader="bars"></loading>

    <div class="row" v-cloak>
        <div class="col-md-12">

            <b-button v-b-modal.modal-new-contact ref="btnNewContact">New contact</b-button>

            <b-modal id="modal-new-contact"
                     ref="modal"
                     title="Add new contact"
                     @@show="resetNewContactModal"
                     @@hidden="resetNewContactModal">
                <form ref="form-new">

                    <div class="form-group">
                        <label for="title">Firstname</label>
                        <input class="form-control" type="text" v-model="newContact.Firstname" />
                    </div>
                    <div class="form-group">
                        <label for="title">Lastname</label>
                        <input class="form-control" type="text" v-model="newContact.Lastname" />
                    </div>
                    <div class="form-group">
                        <label for="title">Address</label>
                        <input class="form-control" type="text" v-model="newContact.Address" />
                    </div>
                    <div class="form-group">
                        <label for="title">City</label>
                        <input class="form-control" type="text" v-model="newContact.City" />
                    </div>
                    <div class="form-group">
                        <label for="title">Country</label>
                        <input class="form-control" type="text" v-model="newContact.Country" />
                    </div>
                    <div class="form-group">
                        <label for="title">Postal code</label>
                        <input class="form-control" type="text" v-model="newContact.PostalCode" />
                    </div>
                    <div class="form-group">
                        <div class="">
                            <label>Date of birth</label>
                            <vuejs-datepicker :bootstrap-styling="true" :format="dateFormat" v-model="newContact.DateOfBirth">
                            </vuejs-datepicker>
                        </div>
                    </div>
                    <div class="form-group">
                        <div v-for="(contactNumber, index) in newContact.ContactNumbers">
                            <select v-model="contactNumber.Type" class="form-control">
                                <option v-bind:value="1">Fixed</option>
                                <option v-bind:value="2">Mobile</option>
                                <option v-bind:value="3">Fax</option>
                            </select>
                            <input v-model="contactNumber.Number" class="form-control">
                        </div>
                        <button class="btn btn-dark" style="margin-top:10px;" @@click.stop.prevent="addNewContactNumber">
                            New contact number
                        </button>
                    </div>
                </form>
                <template slot="modal-footer" slot-scope="{ ok }">
                    <b-button size="sm" variant="success" @@click="handleNewContactOk()">
                        Save
                    </b-button>
                </template>
            </b-modal>
        </div>
    </div>
    <div class="row" v-cloak style="margin-top:20px;">
        <div class="col-md-12">

            <b-table id="contacts-table"
                     :items="contacts"
                     :per-page="perPage"
                     :current-page="currentPage"
                     :fields="fields"
                     small>

                <template v-slot:cell(edit)="row">
                    <b-button size="sm" @@click="edit(row.item, $event.target)" class="mr-1">
                        Edit
                    </b-button>
                </template>

                <template v-slot:cell(delete)="row">
                    <b-button size="sm" @@click="deleteContact(row.item)" class="mr-1">
                        Delete
                    </b-button>
                </template>
            </b-table>

            <b-modal id="edit-modal" :title="contactModal.title" @@hide="resetContactModal">
                <form ref="form-edit">

                    <div class="form-group">
                        <label for="title">Firstname</label>
                        <input class="form-control" type="text" v-model="contactModal.Firstname" />
                    </div>
                    <div class="form-group">
                        <label for="title">Lastname</label>
                        <input class="form-control" type="text" v-model="contactModal.Lastname" />
                    </div>
                    <div class="form-group">
                        <label for="title">Address</label>
                        <input class="form-control" type="text" v-model="contactModal.Address" />
                    </div>
                    <div class="form-group">
                        <label for="title">City</label>
                        <input class="form-control" type="text" v-model="contactModal.City" />
                    </div>
                    <div class="form-group">
                        <label for="title">Country</label>
                        <input class="form-control" type="text" v-model="contactModal.Country" />
                    </div>
                    <div class="form-group">
                        <label for="title">Postal code</label>
                        <input class="form-control" type="text" v-model="contactModal.PostalCode" />
                    </div>
                    <div class="form-group">
                        <div class="">
                            <label>Date of birth</label>
                            <vuejs-datepicker :bootstrap-styling="true" :format="dateFormat" v-model="contactModal.DateOfBirth">
                            </vuejs-datepicker>
                        </div>
                    </div>
                    <div class="form-group">
                        <div v-for="(contactNumber, index) in contactModal.ContactNumbers">
                            <select v-model="contactNumber.type" class="form-control">
                                <option v-bind:value="1">Fixed</option>
                                <option v-bind:value="2">Mobile</option>
                                <option v-bind:value="3">Fax</option>
                            </select>
                            <input v-model="contactNumber.number" class="form-control">
                        </div>
                        <button class="btn btn-dark" style="margin-top:10px;" @@click.stop.prevent="addNewContactNumberOnEdit">
                            New contact number
                        </button>
                    </div>
                </form>
                <template slot="modal-footer" slot-scope="{ ok }">
                    <b-button size="sm" variant="success" @@click="editOkModal()">
                        Save
                    </b-button>
                </template>
            </b-modal>

        </div>
    </div>
    <div class="row" v-cloak>
        <div class="col-md-12">

            <b-pagination v-model="currentPage"
                          :total-rows="rows"
                          :per-page="perPage"
                          aria-controls="contacts-table"></b-pagination>

            <p class="mt-3">Current Page: {{ currentPage }}</p>
        </div>
    </div>
</div>
@section Scripts{

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-vue/2.16.0/bootstrap-vue.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-loading-overlay@3"></script>
    <link href="https://cdn.jsdelivr.net/npm/vue-loading-overlay@3/dist/vue-loading.css" rel="stylesheet">
    <script src="https://unpkg.com/vuejs-datepicker"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.3/signalr.min.js"></script>

    <script>
        Vue.use(VueLoading);
        Vue.component('loading', VueLoading)
        Vue.component('vuejsDatepicker', vuejsDatepicker)
    </script>
    <script>
        var app = new Vue({
            name: 'Contacts demo',
            el: '#app',
            data() {
                return {
                    isLoading: false,
                    fullPage: true,
                    contacts: [],
                    perPage: 10,
                    currentPage: 1,
                    fields: ['firstname', 'lastname', 'dateOfBirth', 'address', 'postalCode', 'city', 'country', { key: 'edit', label: 'Edit' }, { key: 'delete', label: 'Delete' }],
                    contactModal: {
                        Firstname: null,
                        Lastname: null,
                        DateOfBirth: null,
                        Address: null,
                        PostalCode: null,
                        City: null,
                        Country: null,
                        Id: null,
                        ContactNumbers: []
                    },
                    newContact: {
                        Firstname: null,
                        Lastname: null,
                        DateOfBirth: null,
                        Address: null,
                        PostalCode: null,
                        City: null,
                        Country: null,
                        ContactNumbers: [
                            { Number: '', Type: 1 }
                        ]
                    },
                    signalRConnection: {}
                }
            },
            computed: {
                rows() {
                    return this.contacts.length
                }
            },
            created() {

                var _self = this;

                _self.isLoading = true;
                _self.initialLoad();
                _self.setUpSignalR();

            },
            mounted() {
                var _self = this;

                _self.startSignalR();

                _self.signalRConnection.on("ContactsRefresh", function (data) {
                    console.log(data)
                    _self.contacts = data;
                });

                _self.isLoading = false;
            },
            methods: {
                setUpSignalR() {

                    var _self = this;

                    _self.signalRConnection = new signalR.HubConnectionBuilder()
                        .withUrl("https://localhost:44357/contact-hub")
                        .withAutomaticReconnect({
                            nextRetryDelayInMilliseconds: retryContext => {
                                if (retryContext.elapsedMilliseconds < 60000) {
                                    // If we've been reconnecting for less than 60 seconds so far,
                                    // wait between 0 and 10 seconds before the next reconnect attempt.
                                    return Math.random() * 10000;
                                } else {
                                    // If we've been reconnecting for more than 60 seconds so far, stop reconnecting.
                                    return null;
                                }
                            }
                        })
                        .configureLogging(signalR.LogLevel.Trace)
                        .build();

                    _self.signalRConnection.onclose(async () => {
                        await _self.signalRConnection.start();
                    });
                },
                async startSignalR() {
                    var _self = this;

                    await _self.signalRConnection.start().then(() => console.log("connected"));;
                },
                onCancel() {
                    this.isLoading = false;
                },
                initialLoad(e) {

                    this.isLoading = true;

                    axios.get("https://localhost:44357/api/contacts/")
                        .then(response => {
                            this.contacts = response.data;
                            this.isLoading = false;
                        })
                        .catch(e => {
                            console.log(e)
                            this.isLoading = false;
                        });
                },
                dateFormat(date) {
                    return moment(date).format('DD.MM.YYYY');
                },
                edit(item, button) {
                    this.contactModal.Firstname = item.firstname;
                    this.contactModal.Lastname = item.lastname
                    this.contactModal.DateOfBirth = item.dateOfBirth
                    this.contactModal.Address = item.address
                    this.contactModal.PostalCode = item.postalCode
                    this.contactModal.City = item.city
                    this.contactModal.Country = item.country
                    this.contactModal.Id = item.id
                    this.contactModal.ContactNumbers = item.contactNumbers
                    this.$root.$emit('bv::show::modal', "edit-modal", button)
                },
                resetContactModal() {
                    this.contactModal.Firstname = '';
                    this.contactModal.Lastname = '';
                    this.contactModal.DateOfBirth = '';
                    this.contactModal.Address = '';
                    this.contactModal.PostalCode = '';
                    this.contactModal.City = '';
                    this.contactModal.Country = '';
                    this.contactModal.Id = '';
                    this.contactModal.ContactNumbers = []
                },
                editOkModal() {

                    this.isLoading = true;

                    if (!this.validateContactModal()) {
                        this.isLoading = false;
                        return;
                    }

                    axios({
                        method: 'put',
                        url: "https://localhost:44357/api/contacts/" + this.contactModal.Id,
                        data: this.contactModal
                    })
                        .then(response => {
                            if (response) {

                                this.isLoading = false;
                                this.resetContactModal();
                                this.refreshList();
                                this.$root.$emit('bv::hide::modal', 'edit-modal', '')
                                toastr["success"]("Saved!");

                            } else {
                                this.isLoading = false;
                            }
                        })
                        .catch(e => {
                            console.log(e)
                            this.isLoading = false;
                        });
                },
                handleNewContactOk() {

                    var _self = this;

                    _self.isLoading = true;

                    if (!_self.validateNewContact()) {

                        _self.isLoading = false;
                        return;
                    }

                    axios({
                        method: 'post',
                        url: "https://localhost:44357/api/contacts/",
                        data: _self.newContact
                    })
                        .then(response => {
                            if (response) {

                                _self.isLoading = false;
                                _self.$root.$emit('bv::hide::modal', 'modal-new-contact', '#btnNewContact')
                                _self.resetNewContactModal();
                                _self.refreshList();
                                toastr["success"]("Saved!");

                            } else {
                                _self.isLoading = false;
                            }
                        })
                        .catch(e => {
                            console.log(e)
                            _self.isLoading = false;
                        });
                },
                resetNewContactModal() {
                    this.newContact.Firstname = '';
                    this.newContact.Lastname = '';
                    this.newContact.DateOfBirth = '';
                    this.newContact.Address = '';
                    this.newContact.PostalCode = '';
                    this.newContact.City = '';
                    this.newContact.Country = '';
                },
                addNewContactNumber() {
                    this.newContact.ContactNumbers.push({ Number: '', Type: 1 });
                },
                addNewContactNumberOnEdit() {
                    this.contactModal.ContactNumbers.push({ Number: '', Type: 1 });
                },
                deleteContact(item) {

                    this.isLoading = true;

                    axios.delete("https://localhost:44357/api/contacts/" + item.id)
                        .then(response => {
                            this.isLoading = false;
                            this.refreshList();
                        })
                        .catch(e => {
                            console.log(e)
                            this.isLoading = false;
                        });
                },
                refreshList() {
                    this.signalRConnection
                        .invoke("UpdateContactList")
                        .catch(function (err) {
                            return console.error(err.toString());
                        });
                },
                validateNewContact() {
                    if (this.newContact.Firstname == '') {
                        toastr["error"]("Firstname is required");

                        return false;
                    }
                    if (this.newContact.Lastname == '') {
                        toastr["error"]("Lastname is required");

                        return false;
                    }
                    if (this.newContact.DateOfBirth == '') {
                        toastr["error"]("DateOfBirth is required");

                        return false;
                    }
                    if (this.newContact.Address == '') {
                        toastr["error"]("Address is required");

                        return false;
                    }
                    if (this.newContact.PostalCode == '') {
                        toastr["error"]("PostalCode is required");

                        return false;
                    }
                    if (this.newContact.City == '') {
                        toastr["error"]("City is required");

                        return false;
                    }
                    if (this.newContact.Country == '') {
                        toastr["error"]("Country is required");

                        return false;
                    }

                    return true;
                },
                validateContactModal() {
                    if (this.contactModal.Firstname == '') {
                        toastr["error"]("Firstname is required");

                        return false;
                    }
                    if (this.contactModal.Lastname == '') {
                        toastr["error"]("Lastname is required");

                        return false;
                    }
                    if (this.contactModal.DateOfBirth == '') {
                        toastr["error"]("DateOfBirth is required");

                        return false;
                    }
                    if (this.contactModal.Address == '') {
                        toastr["error"]("Address is required");

                        return false;
                    }
                    if (this.contactModal.PostalCode == '') {
                        toastr["error"]("PostalCode is required");

                        return false;
                    }
                    if (this.contactModal.City == '') {
                        toastr["error"]("City is required");

                        return false;
                    }
                    if (this.contactModal.Country == '') {
                        toastr["error"]("Country is required");

                        return false;
                    }

                    return true;
                }
            }
        })
    </script>
}